{
  "_args": [
    [
      "mpd-parser@0.15.0",
      "/home/sanata/Bureau/docker/node_modules/@videojs/http-streaming"
    ]
  ],
  "_from": "mpd-parser@0.15.0",
  "_hasShrinkwrap": false,
  "_id": "mpd-parser@0.15.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/mpd-parser",
  "_nodeVersion": "10.22.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mpd-parser_0.15.0_1605645053942_0.9155513003499018"
  },
  "_npmUser": {
    "email": "brandonocasey@gmail.com",
    "name": "brandonocasey"
  },
  "_npmVersion": "6.14.6",
  "_phantomChildren": {},
  "_requested": {
    "name": "mpd-parser",
    "raw": "mpd-parser@0.15.0",
    "rawSpec": "0.15.0",
    "scope": null,
    "spec": "0.15.0",
    "type": "version"
  },
  "_requiredBy": [
    "/@videojs/http-streaming"
  ],
  "_resolved": "https://registry.npmjs.org/mpd-parser/-/mpd-parser-0.15.0.tgz",
  "_shasum": "2b4836e6bdbd92229110e31b189ed029535aea83",
  "_shrinkwrap": null,
  "_spec": "mpd-parser@0.15.0",
  "_where": "/home/sanata/Bureau/docker/node_modules/@videojs/http-streaming",
  "author": {
    "name": "Brightcove, Inc"
  },
  "browserslist": [
    "defaults",
    "ie 11"
  ],
  "bugs": {
    "url": "https://github.com/videojs/mpd-parser/issues"
  },
  "dependencies": {
    "@babel/runtime": "^7.5.5",
    "@videojs/vhs-utils": "^2.2.1",
    "global": "^4.3.2",
    "xmldom": "^0.1.27"
  },
  "description": "mpd parser",
  "devDependencies": {
    "@videojs/generator-helpers": "~1.2.0",
    "jsdom": "^15.1.1",
    "karma": "^5.0.0",
    "rollup": "^1.19.4",
    "rollup-plugin-string": "^2.0.2",
    "sinon": "^7.2.2",
    "videojs-generate-karma-config": "~7.0.0",
    "videojs-generate-rollup-config": "~5.0.1",
    "videojs-generator-verify": "~2.0.0",
    "videojs-standard": "^8.0.3"
  },
  "directories": {},
  "dist": {
    "fileCount": 60,
    "integrity": "sha512-GfspJVaEnVbWKZQASvh9nsJkvxWh3M/c5Kb2RPnN5ZXPZ7jWWfarWkNKTEuqvoaAKIT8IB/r6PFTWA1GY4fzGg==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJftDL+CRA9TVsSAnZWagAAamcQAJcrxRi6nYDm+Dz4afYl\nDCtMhQ6/W9ITpzcOgbnd2c6b1T5OnfXQo/kuJPbemJSetM+alkVuXY8/DmZm\nbJAvy85erj72r7v/cPKAR3FmfJOEUYXGjwJguZ/a0StmyyJTuhuCTubdrD7Z\nHLDljTplctA62/aw0DSBWngjcK8FMEGlA0qvTtSwmUjG9BqXMcDi9JhBQi4Q\n/fl+9cW/K08DEwEEVt4y+DoumBXruKvwN0QtLnY/GP0YM8o8Zt2U91wyg7WY\nN3mcqSu2faXf7eok07hSnrDWMRK5GUuHWFZSgHgkgbWnuYYRVaFksW6uEg1t\nIqy559PszE8VyGtXjpgKal4kxMA47fQ8h+FsqQcRLUc0GfqxLfshrHMILyWv\nhm0BZYZTEAKpMByntAq7qudpNOC8prQhbk9VGOKuwdDMGqrol9h7yxIYRNYx\nqMWTf7Qb5rXWLbCA+obhKVYXMLQB/2uQzUwVclzhte1G6KPD+FbrNEEkK0cs\nLGH3tyXYeG3RRT63G+U5VNgweXSQLjWnWQMzrtm4X+oF2M358HbZzS/dOVyH\n4Dh8Zz7VxkloePAoUwN9VzyVsXvTp7zz026mQt5VtNBvhombyAP0f4+OFyCy\nk54UMoosYg8cilrUTxqGHa+xPw0H6WLxSJegWUYsnDbv5VuHp04Jn4XMJX32\nzkZL\r\n=nsF7\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "2b4836e6bdbd92229110e31b189ed029535aea83",
    "tarball": "https://registry.npmjs.org/mpd-parser/-/mpd-parser-0.15.0.tgz",
    "unpackedSize": 552786
  },
  "generator-videojs-plugin": {
    "version": "7.7.3"
  },
  "gitHead": "7bf58e93a9b429107137611220e63d1ced3486c1",
  "homepage": "https://github.com/videojs/mpd-parser#readme",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "keywords": [
    "videojs",
    "videojs-plugin"
  ],
  "license": "Apache-2.0",
  "lint-staged": {
    "*.js": [
      "git add",
      "vjsstandard --fix"
    ],
    "README.md": [
      "doctoc --notitle",
      "git add"
    ]
  },
  "main": "dist/mpd-parser.cjs.js",
  "maintainers": [
    {
      "name": "misteroneill",
      "email": "pgoneill@gmail.com"
    },
    {
      "name": "heff",
      "email": "npm@heff.me"
    },
    {
      "name": "dmlap",
      "email": "dlapalomento@gmail.com"
    },
    {
      "name": "lday",
      "email": "ldayananda@brightcove.com"
    },
    {
      "name": "brandonocasey",
      "email": "brandonocasey@gmail.com"
    },
    {
      "name": "imbcmdth",
      "email": "jon.carlos.rivera@gmail.com"
    },
    {
      "name": "misterben",
      "email": "npm@misterben.me"
    },
    {
      "name": "mmcclure",
      "email": "npm@htbx.net"
    },
    {
      "name": "gkatsev",
      "email": "me@gkatsev.com"
    },
    {
      "name": "abarstow",
      "email": "alexander.barstow@gmail.com"
    },
    {
      "name": "squarebracket",
      "email": "chuck.wilson+github@gmail.com"
    },
    {
      "name": "forbesjo",
      "email": "joseph.a.forbes@gmail.com"
    },
    {
      "name": "gesinger",
      "email": "gesinger@gmail.com"
    },
    {
      "name": "mjneil",
      "email": "mneilweb@gmail.com"
    },
    {
      "name": "okaramian",
      "email": "okaramia@gmail.com"
    }
  ],
  "module": "dist/mpd-parser.es.js",
  "name": "mpd-parser",
  "optionalDependencies": {},
  "readme": "# mpd-parser\n\n[![Build Status](https://travis-ci.org/videojs/mpd-parser.svg?branch=master)](https://travis-ci.org/videojs/mpd-parser)\n[![Greenkeeper badge](https://badges.greenkeeper.io/videojs/mpd-parser.svg)](https://greenkeeper.io/)\n[![Slack Status](http://slack.videojs.com/badge.svg)](http://slack.videojs.com)\n\n[![NPM](https://nodei.co/npm/mpd-parser.png?downloads=true&downloadRank=true)](https://nodei.co/npm/mpd-parser/)\n\nmpd parser\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Parsed Output](#parsed-output)\n- [Including the Parser](#including-the-parser)\n  - [`<script>` Tag](#script-tag)\n  - [Browserify](#browserify)\n  - [RequireJS/AMD](#requirejsamd)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## Installation\n\n```sh\nnpm install --save mpd-parser\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save mpd-parser\n```\n\n## Usage\n\n```js\nvar manifest = [\n  '<>',\n  '<>',\n].join('\\n');\n\nvar parsedManifest = mpdParser.parse(manifest, manifestUrl);\n```\n\n### Parsed Output\n\nThe parser ouputs a plain javascript object with the following structure:\n\n```js\nManifest {\n  allowCache: boolean,\n  endList: boolean,\n  mediaSequence: number,\n  discontinuitySequence: number,\n  playlistType: string,\n  playlists: [\n    {\n      attributes: {},\n      Manifest\n    }\n  ],\n  mediaGroups: {\n    AUDIO: {\n      'GROUP-ID': {\n        default: boolean,\n        autoselect: boolean,\n        language: string,\n        uri: string,\n        instreamId: string,\n        characteristics: string,\n        forced: boolean\n      }\n    },\n    VIDEO: {},\n    'CLOSED-CAPTIONS': {},\n    SUBTITLES: {}\n  },\n  dateTimeString: string,\n  dateTimeObject: Date,\n  targetDuration: number,\n  totalDuration: number,\n  discontinuityStarts: [number],\n  segments: [\n    {\n      byterange: {\n        length: number,\n        offset: number\n      },\n      duration: number,\n      attributes: {},\n      discontinuity: number,\n      uri: string,\n      timeline: number,\n      key: {\n        method: string,\n        uri: string,\n        iv: string\n      },\n      map: {\n        uri: string,\n        byterange: {\n          length: number,\n          offset: number\n        }\n      },\n      'cue-out': string,\n      'cue-out-cont': string,\n      'cue-in': string\n    }\n  ]\n}\n```\n\n## Including the Parser\n\nTo include mpd-parser on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include it on your page.\n\n```html\n<script src=\"//path/to/mpd-parser.min.js\"></script>\n<script>\n  var mpdParser = window['mpd-parser'];\n  var parsedManifest = mpdParser.parse(manifest, manifestUrl);\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install mpd-parser via npm and `require` the parser as you would any other module.\n\n```js\nvar mpdParser = require('mpd-parser');\n\nvar parsedManifest = mpdParser.parse(manifest, manifestUrl);\n```\n\nWith ES6:\n```js\nimport { parse } from 'mpd-parser';\n\nconst parsedManifest = parse(manifest, manifestUrl);\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the parser as you normally would:\n\n```js\nrequire(['mpd-parser'], function(mpdParser) {\n  var parsedManifest = mpdParser.parse(manifest, manifestUrl);\n});\n```\n\n## License\n\nApache-2.0. Copyright (c) Brightcove, Inc\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/videojs/mpd-parser.git"
  },
  "scripts": {
    "build": "npm-run-all -s clean -p build:*",
    "build-prod": "cross-env-shell NO_TEST_BUNDLE=1 'npm run build'",
    "build-test": "cross-env-shell TEST_BUNDLE_ONLY=1 'npm run build'",
    "build:js": "rollup -c scripts/rollup.config.js",
    "clean": "shx rm -rf ./dist ./test/dist && shx mkdir -p ./dist ./test/dist",
    "lint": "vjsstandard",
    "netlify": "node scripts/netlify.js",
    "posttest": "shx cat test/dist/coverage/text.txt",
    "prenetlify": "npm run build",
    "prepublishOnly": "npm-run-all build-prod && vjsverify --verbose",
    "preversion": "npm test",
    "server": "karma start scripts/karma.conf.js --singleRun=false --auto-watch",
    "start": "npm-run-all -p server watch",
    "test": "npm-run-all lint build-test && npm-run-all test:*",
    "test:browser": "karma start scripts/karma.conf.js",
    "test:node": "qunit test/dist/bundle-node.js",
    "update-changelog": "conventional-changelog -p videojs -i CHANGELOG.md -s",
    "version": "is-prerelease || npm run update-changelog && git add CHANGELOG.md",
    "watch": "npm-run-all -p watch:*",
    "watch:js": "npm run build:js -- -w"
  },
  "version": "0.15.0",
  "vjsstandard": {
    "ignore": [
      "dist",
      "docs",
      "test/dist"
    ]
  }
}
